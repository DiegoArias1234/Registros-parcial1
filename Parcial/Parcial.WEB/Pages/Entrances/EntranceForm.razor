@inject SweetAlertService sweetAlertService
<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label>Ingresa Boleta:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Entrance.FechaDeUso"/>
            <ValidationMessage For="@(() => Entrance.FechaDeUso)"/>
        </div>
    </div>
    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;


    [Parameter]
    [EditorRequired]
    public Entrance Entrance { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; } 

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }


    public bool FormPostedSuccesFully { get; set; }


    protected override void OnInitialized()
    {
        editContext = new(Entrance);
    }

    private async Task OnBeforeInternalNavigation (LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccesFully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
        {
            Title = "Confirmación",
            Text = "¿Deseas abandonar la pagina y perder los cambios",
            Icon = SweetAlertIcon.Warning,
            ShowCancelButton = true,
            CancelButtonText = "NO",
            ConfirmButtonText = "Si"
        });
        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();

    }
}
